/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __exlcm_car_t_hpp__
#define __exlcm_car_t_hpp__

#include <string>

namespace exlcm
{

class car_t
{
    public:
        std::string steering_angle;

        std::string pedal;

        std::string brake;

        std::string gear;

        std::string steering_angle_speed;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "car_t"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int car_t::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int car_t::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int car_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t car_t::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* car_t::getTypeName()
{
    return "car_t";
}

int car_t::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    char* steering_angle_cstr = (char*) this->steering_angle.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &steering_angle_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* pedal_cstr = (char*) this->pedal.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &pedal_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* brake_cstr = (char*) this->brake.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &brake_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* gear_cstr = (char*) this->gear.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &gear_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* steering_angle_speed_cstr = (char*) this->steering_angle_speed.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &steering_angle_speed_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int car_t::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    int32_t __steering_angle_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__steering_angle_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__steering_angle_len__ > maxlen - pos) return -1;
    this->steering_angle.assign(((const char*)buf) + offset + pos, __steering_angle_len__ - 1);
    pos += __steering_angle_len__;

    int32_t __pedal_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__pedal_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__pedal_len__ > maxlen - pos) return -1;
    this->pedal.assign(((const char*)buf) + offset + pos, __pedal_len__ - 1);
    pos += __pedal_len__;

    int32_t __brake_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__brake_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__brake_len__ > maxlen - pos) return -1;
    this->brake.assign(((const char*)buf) + offset + pos, __brake_len__ - 1);
    pos += __brake_len__;

    int32_t __gear_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__gear_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__gear_len__ > maxlen - pos) return -1;
    this->gear.assign(((const char*)buf) + offset + pos, __gear_len__ - 1);
    pos += __gear_len__;

    int32_t __steering_angle_speed_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__steering_angle_speed_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__steering_angle_speed_len__ > maxlen - pos) return -1;
    this->steering_angle_speed.assign(((const char*)buf) + offset + pos, __steering_angle_speed_len__ - 1);
    pos += __steering_angle_speed_len__;

    return pos;
}

int car_t::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += this->steering_angle.size() + 4 + 1;
    enc_size += this->pedal.size() + 4 + 1;
    enc_size += this->brake.size() + 4 + 1;
    enc_size += this->gear.size() + 4 + 1;
    enc_size += this->steering_angle_speed.size() + 4 + 1;
    return enc_size;
}

uint64_t car_t::_computeHash(const __lcm_hash_ptr *)
{
    uint64_t hash = 0xe8cb35a93c65c4e6LL;
    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
